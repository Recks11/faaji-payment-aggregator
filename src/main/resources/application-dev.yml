server:
  port: 8080
  reactive:
    session:
      timeout: 45000
spring:
  cloud:
    stream:
      bindings:
        input-in-0:
          consumer.valueSerde: dev.faaji.streams.config.KafkaStreamsConfig$PaymentUpdateSerde
          destination: FaajiEventPayments
        input-out-0:
          destination: FaajiPaymentTotals
        partyinit-in-0:
          consumer.valueSerde: dev.faaji.streams.config.KafkaStreamsConfig$PartySerde
          destination: valentine-events
        partyinit-out-0:
          destination: valentine-event-index
        userregister-in-0:
          consumer.valueSerde: dev.faaji.streams.config.KafkaStreamsConfig$UserRegSerde
          destination: valentine-user-registration
        userregister-out-0:
          destination: valentine-event-index
        userinterest-in-0:
          consumer.valueSerde: dev.faaji.streams.config.KafkaStreamsConfig$UserRegSerde
          destination: valentine-user-registration
        userinterest-out-0:
          destination: valentine-user-index
        room-recommender-in-0:
          consumer.valueSerde: dev.faaji.streams.config.KafkaStreamsConfig$UserRegSerde
          destination: FaajiEventRegistration
        room-recommender-out-0:
          destination: FaajiUserRooms
      kafka.streams:
        binder:
          auto-create-topics: false
          configuration:
            application.server: localhost:${server.port}
            commit.interval.ms: 5000
            default.list.value.serde.inner: org.apache.kafka.common.serialization.Serdes$StringSerde
            default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
            default.value.serde: org.springframework.kafka.support.serializer.JsonSerde
            spring.json.trusted.packages: '*'
#            spring.json.value.default.type: dev.faaji.streams.model.PaymentUpdateEvent
          #        serdeError: logAndContinue
          functions:
            input.applicationId: ${spring.application.name}-processor-1
            partyinit.applicationId: ${spring.application.name}-processor-2
            userregister.applicationId: ${spring.application.name}-processor-3
            userinterest.applicationId: ${spring.application.name}-processor-4
    function:
      definition: partyinit;userregister;userinterest;input;room-recommender
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringDeserializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    streams:
      replication-factor: 1
  application:
    name: PaymentStreamProcessor

faaji:
  api:
    url: ${FAAJI_API_URL}